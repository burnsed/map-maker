#! /usr/bin/env python2

from argparse import ArgumentParser
import os
import re
import sys


from xml.etree import ElementTree
import yaml


MAP_TEMPLATES = os.path.join(os.path.dirname(os.path.realpath(__file__)), "map-templates")
MAX_SUPPORTED_COLORS = 9

DEBUG = False

FILL_RE = re.compile(r"fill:#\w+")
STROKE_RE = re.compile(r"stroke:#\w")

HIGHLIGHT_STROKE = "#000000"


def debug(msg):
    if DEBUG:
        print msg


def readConfig(path):
    debug("Reading config file: %s"%(path))
    with open(path) as f:
        config = yaml.safe_load(f)

    # TODO: Validate the config
    return config


def getMapTemplate(config):
    # TODO: add error checking
    template = os.path.join(MAP_TEMPLATES, config['map']['type']+".svg")
    debug("Using template: %s"%(template))
    return template


def chooseColor(color_map, value):
    return color_map[value]


def main():
    #
    # Parse the command line options
    #
    parser = ArgumentParser(description="Generate a colored map")
    parser.add_argument("--debug", "-d", action="store_true", help="Enable debugging")
    parser.add_argument("config_file", help="yaml config for your dataset")
    parser.add_argument("output", help="The output SVG you want created")
    args = parser.parse_args()

    global DEBUG
    DEBUG = args.debug
    debug("-"*40)
    debug("DEBUGGING ENABLED")
    debug("-"*40)

    config_file = args.config_file
    output_file = args.output
    if not output_file.endswith(".svg"):
        output_file += ".svg"

    #
    # Parse the config file
    #
    config = readConfig(config_file)
    map_template = getMapTemplate(config)
    debug("Output file: %s"%(output_file))
    debug("")

    # FIXME: this should be conditional
    data = config['map']['data']

    #
    # Load the SVG map
    #
    with open(map_template) as f:
        tree = ElementTree.parse(f)
    root = tree.getroot()

    #
    # Setup the color scale
    #
    color_map = {}
    max_val = max(data.values())
    min_val = 0
    per_color = int(round((float(max_val) - 0) / (len(config['map']['colors'])-1)))

    # Trim any unused colors in palette (only if there are more colors than values)
    used_colors = int(max_val/per_color)
    if len(config['map']['colors']) > used_colors:
        config['map']['colors'] = config['map']['colors'][0:used_colors+1]
        per_color = int(round((float(max_val) - 0) / (len(config['map']['colors'])-1)))

    x = 0
    for i in range(max_val+1):
        color_map[i] = config['map']['colors'][x]

        if i == 0:
            x += 1
        elif i%per_color == 0:
            x += 1
            if x > len(config['map']['colors']) - 1:
                x = len(config['map']['colors']) - 1


    reverse_color_map = {}
    for k, v in color_map.iteritems():
        reverse_color_map[v] = reverse_color_map.get(v, [])
        reverse_color_map[v].append(k)

    debug("Color mapping:")
    for c in config['map']['colors']:
        # debug("    %s: %s"%(c, reverse_color_map.get(c)))
        debug("    %s: %d - %d"%(c, min(reverse_color_map[c]), max(reverse_color_map[c])))
    debug("")

    #
    # Find data elements in the template
    #
    debug("-"*40)
    debug("Populating data...")
    elements = [e for e in root.iter()]
    parent_map = dict((c, p) for p in root.getiterator() for c in p)

    for e in elements[1:]:
        # trim w3 spec version
        tag = e.tag.split('}')[-1]
        attrs = dict(e.attrib.items())
        if tag == 'path' and attrs.get('id') in data:
            if 'style' in attrs:
                element_name = attrs['id']
                color = chooseColor(color_map, data[element_name])
                new_style = FILL_RE.sub("fill:"+color, attrs['style'])
                if attrs.get('data-highlight'):
                    new_style = STROKE_RE.sub(HIGHLIGHT_STROKE, new_style)

                e.set('style', new_style)
                debug("    Found path for '%s', set color to %s"%(element_name, color))

        elif tag == 'g' and attrs.get('id') in data:
                element_name = attrs['id']
                color = chooseColor(color_map, data[element_name])

                for ge in e.iter():
                    ge_attrs = dict(ge.attrib.items())
                    if 'style' in ge_attrs:
                        # set color of sub-element_name
                        new_style = FILL_RE.sub("fill:"+chooseColor(color_map, data[element_name]), ge_attrs['style'])
                        ge.set('style', new_style)

                debug("    Found group for '%s', set color to %s"%(element_name, color))


    #
    # Set the scale
    #
    max_val = max(data.values())
    min_val = min(data.values())

    debug("")
    debug("Populating the legend:")
    if 'legend' in config['map']:
        debug("*** Custom Legend Supplied")

    for e in elements[1:]:
        # trim w3 spec version
        tag = e.tag.split('}')[-1]
        attrs = dict(e.attrib.items())

        # Set the title
        if tag == 'tspan' and attrs.get('id') == "Map-Title":
            e.text = config['map']['title']

        # Set all Colors
        if 'legend' in config['map']:
            for c in range(MAX_SUPPORTED_COLORS):
                if tag =='rect' and attrs.get('id') == "Scale%d-Color"%(c):
                    if c in config['map']['legend']:
                        new_style = FILL_RE.sub("fill:"+config['map']['colors'][c], attrs['style'])
                        e.set('style', new_style)
                        debug("    Set %s to %s"%(attrs['id'], config['map']['colors'][c]))
                    else:
                        parent_map[e].remove(e)
                        debug("    Removed unused %s"%(attrs['id']))
                elif tag == 'tspan' and attrs.get('id') == "Scale%d-Text"%(c):
                    if c in config['map']['legend']:
                        e.text = str(config['map']['legend'][c])
                        debug("    Set %s to '%s'"%(attrs['id'], e.text))
                    else:
                        parent_map[e].remove(e)
                        debug("    Removed unused %s"%(attrs['id']))

        else:
            for c in range(MAX_SUPPORTED_COLORS):
                if tag == 'rect' and attrs.get('id') == "Scale%d-Color"%(c):
                    if c >= len(config['map']['colors']):
                        # delete the element
                        parent_map[e].remove(e)
                        debug("    Removed unused %s"%(attrs['id']))
                    elif 'style' in attrs:
                        new_style = FILL_RE.sub("fill:"+config['map']['colors'][c], attrs['style'])
                        e.set('style', new_style)
                        debug("    Set %s to %s"%(attrs['id'], config['map']['colors'][c]))
                elif tag == 'tspan' and attrs.get('id') == "Scale%d-Text"%(c):
                    if c >= len(config['map']['colors']):
                        # delete the element
                        parent_map[e].remove(e)
                        debug("    Removed unused %s"%(attrs['id']))
                    else:
                        scale_min = min(reverse_color_map[config['map']['colors'][c]])
                        scale_max = max(reverse_color_map[config['map']['colors'][c]])
                        if scale_min == scale_max:
                            e.text = str(scale_min)
                        else:
                            e.text = "%d - %d"%(scale_min, scale_max)
                        debug("    Set %s to '%s'"%(attrs['id'], e.text))

    # write new svg
    debug("-"*40)
    debug("Writing svg file: %s"%(output_file))
    with open(output_file, 'w') as f:
        tree.write(f)

    debug("All Done")

if __name__ == "__main__":
    main()