#! /usr/bin/env python2

from argparse import ArgumentParser
import os
import sys


from xml.etree import ElementTree
import yaml


MAP_TEMPLATES = os.path.join(os.path.dirname(os.path.realpath(__file__)), "map-templates")
MAX_SUPPORTED_COLORS = 9

DEBUG = False

BASIC_STYLE = "fill-opacity:1;stroke:#a9a9a9;stroke-width:103;stroke-linejoin:round;stroke-opacity:1;fill:"
HIGHLIGHT_STYLE = "fill-opacity:1;stroke:#000000;stroke-width:103;stroke-linejoin:round;stroke-opacity:1;fill:"

SCALE_STYLE = "opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:#959595;stroke-width:94.64063263;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:18.89763832;stroke-opacity:1;paint-order:stroke fill markers;fill:"


def debug(msg):
    if DEBUG:
        print msg


def readConfig(path):
    debug("Reading config file: %s"%(path))
    with open(path) as f:
        config = yaml.safe_load(f)

    # TODO: Validate the config
    return config


def getMapTemplate(config):
    # TODO: add error checking
    template = os.path.join(MAP_TEMPLATES, config['map']['type']+".svg")
    debug("Using template: %s"%(template))
    return template


def chooseColor(color_map, value):
    return color_map[value]


def main():
    #
    # Parse the command line options
    #
    parser = ArgumentParser(description="Generate a colored map")
    parser.add_argument("--debug", "-d", action="store_true", help="Enable debugging")
    parser.add_argument("config_file", help="yaml config for your dataset")
    parser.add_argument("output", help="The output SVG you want created")
    args = parser.parse_args()

    global DEBUG
    DEBUG = args.debug
    debug("-"*40)
    debug("DEBUGGING ENABLED")
    debug("-"*40)

    config_file = args.config_file
    output_file = args.output
    if not output_file.endswith(".svg"):
        output_file += ".svg"

    #
    # Parse the config file
    #
    config = readConfig(config_file)
    map_template = getMapTemplate(config)
    debug("Output file: %s"%(output_file))
    debug("")

    # FIXME: this should be conditional
    data = config['map']['data']

    #
    # Load the SVG map
    #
    with open(map_template) as f:
        tree = ElementTree.parse(f)
    root = tree.getroot()

    #
    # Setup the color scale
    #
    color_map = {}
    max_val = max(data.values())
    min_val = 0
    per_color = round((float(max_val) - 0) / (len(config['map']['colors'])-1))
    x = 1
    color_map[0] = config['map']['colors'][0]
    for i in range(1, max_val+1):
        if i%per_color == 0:
            x += 1
            if x > len(config['map']['colors']) - 1:
                x = len(config['map']['colors']) - 1

        color_map[i] = config['map']['colors'][x]

    reverse_color_map = {}
    for k, v in color_map.iteritems():
        reverse_color_map[v] = reverse_color_map.get(v, [])
        reverse_color_map[v].append(k)

    debug("Color mapping:")
    for c in config['map']['colors']:
        debug("    %s: %d - %d"%(c, min(reverse_color_map[c]), max(reverse_color_map[c])))
    debug("")

    #
    # Find data elements in the template
    #
    debug("-"*40)
    debug("Populating data...")
    elements = [e for e in root.iter()]
    parent_map = dict((c, p) for p in root.getiterator() for c in p)

    for e in elements[1:]:
        # trim w3 spec version
        tag = e.tag.split('}')[-1]
        attrs = dict(e.attrib.items())
        if tag == 'path' and attrs.get('id') in data:
            if 'style' in attrs:
                element_name = attrs['id']
                color = chooseColor(color_map, data[element_name])
                if attrs.get('data-highlight'):
                    new_style = HIGHLIGHT_STYLE + color
                else:
                    new_style = BASIC_STYLE + color

                e.set('style', new_style)
                debug("    Found path for '%s', set color to %s"%(element_name, color))

        elif tag == 'g' and attrs.get('id') in data:
                element_name = attrs['id']
                color = chooseColor(color_map, data[element_name])

                for ge in e.iter():
                    ge_attrs = dict(ge.attrib.items())
                    if 'style' in ge_attrs:
                        # set color of sub-element_name
                        new_style = BASIC_STYLE + chooseColor(color_map, data[element_name])
                        ge.set('style', new_style)

                debug("    Found group for '%s', set color to %s"%(element_name, color))


    #
    # Set the scale
    #
    max_val = max(data.values())
    min_val = min(data.values())

    debug("")
    debug("Populating the legend:")
    for e in elements[1:]:
        # trim w3 spec version
        tag = e.tag.split('}')[-1]
        attrs = dict(e.attrib.items())

        # Set the title
        if tag == 'tspan' and attrs.get('id') == "Map-Title":
            e.text = config['map']['title']

        # Set all Colors
        for c in range(MAX_SUPPORTED_COLORS):
            if tag == 'rect' and attrs.get('id') == "Scale%d-Color"%(c):
                if c >= len(config['map']['colors']):
                    # delete the element
                    parent_map[e].remove(e)
                    debug("    Removed unused %s"%(attrs['id']))
                elif 'style' in attrs:
                    new_style = SCALE_STYLE + config['map']['colors'][c]
                    e.set('style', new_style)
                    debug("    Set %s to %s"%(attrs['id'], config['map']['colors'][c]))
            elif tag == 'tspan' and attrs.get('id') == "Scale%d-Text"%(c):
                if c >= len(config['map']['colors']):
                    # delete the element
                    parent_map[e].remove(e)
                    debug("    Removed unused %s"%(attrs['id']))
                else:
                    scale_min = min(reverse_color_map[config['map']['colors'][c]])
                    scale_max = max(reverse_color_map[config['map']['colors'][c]])
                    if scale_min == scale_max:
                        e.text = str(scale_min)
                    else:
                        e.text = "%d - %d"%(scale_min, scale_max)
                    debug("    Set %s to '%s'"%(attrs['id'], e.text))

    # write new svg
    debug("-"*40)
    debug("Writing svg file: %s"%(output_file))
    with open(output_file, 'w') as f:
        tree.write(f)

    debug("All Done")

if __name__ == "__main__":
    main()